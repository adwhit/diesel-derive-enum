#![recursion_limit = "1024"]

extern crate proc_macro;

use heck::{ToKebabCase, ToLowerCamelCase, ToShoutySnakeCase, ToSnakeCase, ToUpperCamelCase};
use proc_macro::TokenStream;
use proc_macro2::{Ident, Span};
use quote::quote;
use syn::spanned::Spanned;
use syn::*;

/// Implement the traits necessary for inserting the enum directly into a database
///
/// # Attributes
///
/// ## Type attributes
///
/// * `#[db_enum(existing_type_path = "crate::schema::sql_types::NewEnum")]` specifies
///   the path to a corresponding diesel type that was already created by the
///   diesel CLI. If omitted, the type will be generated by this macro.
///   *Note*: Only applies to `postgres`, will error if specified for other databases
/// * `#[db_enum(diesel_type = "NewEnumMapping")]` specifies the name for the diesel type
///   to create. If omitted, uses `<enum name>Mapping`.
///   *Note*: Cannot be specified alongside `existing_type_path`
/// * `#[db_enum(value_style = "snake_case")]` specifies a renaming style from each of
///   the rust enum variants to each of the database variants. Either `camelCase`,
///   `kebab-case`, `PascalCase`, `SCREAMING_SNAKE_CASE`, `snake_case`,
///   `verbatim`. If omitted, uses `snake_case`.
/// * `#[db_enum(impl_clone_on_sql_mapping)]` opt-in to implementing `Clone` for the SQL type.
///   By default, Diesel itself already implements `Clone` for SQL types through custom_type_derives.
///
/// ## Variant attributes
///
/// * `#[db_enum(rename = "variant")]` specifies the db name for a specific variant.
#[proc_macro_derive(DbEnum, attributes(db_enum))]
pub fn derive(input: TokenStream) -> TokenStream {
    let input: DeriveInput = parse_macro_input!(input as DeriveInput);

    // Gather and validate all type-level attributes in one pass
    let attrs_result = gather_db_enum_attrs(&input.attrs, false);
    if let Err(e) = attrs_result {
        return e.to_compile_error().into();
    }

    let attrs = attrs_result.unwrap();

    // Check for feature-specific constraints
    if !cfg!(feature = "postgres") && attrs.existing_type_path.is_some() {
        return syn::Error::new(
            Span::call_site(),
            "existing_type_path attribute only applies when the 'postgres' feature is enabled",
        )
        .to_compile_error()
        .into();
    }

    if attrs.existing_type_path.is_some() && attrs.pg_type.is_some() {
        return syn::Error::new(
            Span::call_site(),
            "Cannot specify both `existing_type_path` and `pg_type` attributes",
        )
        .to_compile_error()
        .into();
    }

    if attrs.existing_type_path.is_some() && attrs.diesel_type.is_some() {
        return syn::Error::new(
            Span::call_site(),
            "Cannot specify both `existing_type_path` and `diesel_type` attributes",
        )
        .to_compile_error()
        .into();
    }

    let pg_internal_type = attrs
        .pg_type
        .unwrap_or_else(|| input.ident.to_string().to_snake_case());
    let new_diesel_mapping = attrs
        .diesel_type
        .unwrap_or_else(|| format!("{}Mapping", input.ident));
    let case_style = CaseStyle::from_string(
        &attrs
            .value_style
            .unwrap_or_else(|| "snake_case".to_string()),
    );
    let with_clone = attrs.impl_clone_on_sql_mapping;

    let existing_mapping_path = attrs.existing_type_path.map(|v| {
        v.parse::<proc_macro2::TokenStream>()
            .expect("existing_type_path is not a valid token")
    });
    let new_diesel_mapping = Ident::new(new_diesel_mapping.as_ref(), Span::call_site());
    if let Data::Enum(syn::DataEnum {
        variants: data_variants,
        ..
    }) = input.data
    {
        generate_derive_enum_impls(
            &existing_mapping_path,
            &new_diesel_mapping,
            &pg_internal_type,
            case_style,
            &input.ident,
            with_clone,
            &data_variants,
        )
    } else {
        syn::Error::new(
            Span::call_site(),
            "derive(DbEnum) can only be applied to enums",
        )
        .to_compile_error()
        .into()
    }
}

/// Valid attribute names in the db_enum namespace for type-level attributes
const VALID_TYPE_ATTRIBUTES: [&str; 5] = [
    "existing_type_path",
    "diesel_type",
    "value_style",
    "pg_type",
    "impl_clone_on_sql_mapping",
];

/// Valid attribute names in the db_enum namespace for variant-level attributes
const VALID_VARIANT_ATTRIBUTES: [&str; 1] = ["rename"];

/// Container for all type-level attributes for DbEnum
#[derive(Debug, Default)]
struct DbEnumTypeAttrs {
    existing_type_path: Option<String>,
    diesel_type: Option<String>,
    value_style: Option<String>,
    pg_type: Option<String>,
    impl_clone_on_sql_mapping: bool,
}

/// Defines the casing for the database representation.  Follows serde naming convention.
#[derive(Copy, Clone, Debug, PartialEq)]
enum CaseStyle {
    Camel,
    Kebab,
    Pascal,
    Upper,
    ScreamingSnake,
    Snake,
    Verbatim,
}

impl CaseStyle {
    fn from_string(name: &str) -> Self {
        match name {
            "camelCase" => CaseStyle::Camel,
            "kebab-case" => CaseStyle::Kebab,
            "PascalCase" => CaseStyle::Pascal,
            "SCREAMING_SNAKE_CASE" => CaseStyle::ScreamingSnake,
            "UPPERCASE" => CaseStyle::Upper,
            "snake_case" => CaseStyle::Snake,
            "verbatim" | "verbatimcase" => CaseStyle::Verbatim,
            s => panic!("unsupported casing: `{}`", s),
        }
    }
}

/// Gather and validate all db_enum attributes from a list of attributes
fn gather_db_enum_attrs(
    attrs: &[Attribute],
    is_variant: bool,
) -> std::result::Result<DbEnumTypeAttrs, syn::Error> {
    // Debug output

    let valid_attrs = if is_variant {
        &VALID_VARIANT_ATTRIBUTES[..]
    } else {
        &VALID_TYPE_ATTRIBUTES[..]
    };

    let mut result = DbEnumTypeAttrs::default();

    for attr in attrs.iter() {
        if attr.path().is_ident("db_enum") {
            let Meta::List(nested) = &attr.meta else {
                continue;
            };

            // Process all the nested meta items in this db_enum attribute
            nested.parse_nested_meta(|meta| {
                let attr_name = meta.path.get_ident().map_or_else(|| "unknown".to_string(), |i| i.to_string());
                // Validate the attribute name
                if !valid_attrs.contains(&attr_name.as_str()) {
                    // Try to find a similar attribute name to suggest
                                        let suggestion = valid_attrs.iter()
                        .find(|&&valid| attr_name.contains(valid) || valid.contains(&attr_name))
                        .unwrap_or(&valid_attrs[0]); // Default suggestion is the first valid attribute
                    let context = if is_variant { "variant" } else { "type" };
                    return Err(meta.error(format!(
                        "Unknown db_enum {} attribute: '{}'. Did you mean '{}'? Valid attributes are: {:?}",
                        context, attr_name, suggestion, valid_attrs
                    )));}// Process known attributes
                match attr_name.as_str() {
                    "existing_type_path" => {
                        if let Ok(value) = meta.value()?.parse::<LitStr>() {
                            result.existing_type_path = Some(value.value());
                        }
                    },
                    "diesel_type" => {
                        if let Ok(value) = meta.value()?.parse::<LitStr>() {
                            result.diesel_type = Some(value.value());
                        }
                    },
                    "value_style" => {
                        if let Ok(value) = meta.value()?.parse::<LitStr>() {
                            result.value_style = Some(value.value());
                        }
                    },
                    "pg_type" => {
                        if let Ok(value) = meta.value()?.parse::<LitStr>() {
                            result.pg_type = Some(value.value());
                        }
                    },
                    "impl_clone_on_sql_mapping" => {
                        result.impl_clone_on_sql_mapping = true;
                    },
                    "rename" if is_variant => {
                        // For variant attributes, we only need to validate since the actual
                        // handling is done separately in the variant_db generation code
                        if meta.value().is_err() {
                            return Err(meta.error(
                                "The 'rename' attribute requires a value"
                            ));
                        }
                    },
                    _ => {
                        // This should never happen due to our earlier validation
                        return Err(meta.error(format!(
                            "Unhandled attribute: {}", attr_name
                        )));
                    }
                }
                Ok(())
            })?;
        }
    }
    Ok(result)
}

/// Gets a variant-level attribute value, with validation for attribute names
fn get_variant_db_enum_attr_value(
    attrs: &[Attribute],
    name: &str,
) -> std::result::Result<Option<String>, syn::Error> {
    // Ensure we're asking for a valid variant attribute
    if !VALID_VARIANT_ATTRIBUTES.contains(&name) {
        return Err(syn::Error::new(
            Span::call_site(),
            format!("Internal error: invalid variant attribute name: {}", name),
        ));
    }

    for attr in attrs.iter() {
        if attr.path().is_ident("db_enum") {
            let Meta::List(nested) = &attr.meta else {
                continue;
            };

            let mut result = None;
            let mut found_invalid = false;
            let mut invalid_attr = String::new();
            let mut invalid_span = Span::call_site();

            nested
                .parse_nested_meta(|meta| {
                    let attr_name = meta
                        .path
                        .get_ident()
                        .map_or_else(|| "unknown".to_string(), |i| i.to_string());

                    // Validate the attribute name
                    if !VALID_VARIANT_ATTRIBUTES.contains(&attr_name.as_str()) {
                        found_invalid = true;
                        invalid_attr = attr_name;
                        invalid_span = meta.path.span();
                        return Ok(());
                    }

                    if attr_name == name {
                        if let Ok(value) = meta.value()?.parse::<LitStr>() {
                            result = Some(value.value());
                        }
                    }

                    Ok(())
                })
                .ok();

            if found_invalid {
                // Try to find a similar attribute name to suggest
                let suggestion = VALID_VARIANT_ATTRIBUTES
                    .iter()
                    .find(|&&valid| invalid_attr.contains(valid) || valid.contains(&invalid_attr))
                    .unwrap_or(&VALID_VARIANT_ATTRIBUTES[0]);

                return Err(syn::Error::new(
                    invalid_span,
                    format!("Unknown db_enum variant attribute: '{}'. Did you mean '{}'? Valid attributes are: {:?}",
                        invalid_attr, suggestion, VALID_VARIANT_ATTRIBUTES)
                ));
            }

            if result.is_some() {
                return Ok(result);
            }
        }
    }
    Ok(None)
}

fn generate_derive_enum_impls(
    existing_mapping_path: &Option<proc_macro2::TokenStream>,
    new_diesel_mapping: &Ident,
    pg_internal_type: &str,
    case_style: CaseStyle,
    enum_ty: &Ident,
    with_clone: bool,
    variants: &syn::punctuated::Punctuated<Variant, syn::token::Comma>,
) -> TokenStream {
    let modname = Ident::new(&format!("db_enum_impl_{}", enum_ty), Span::call_site());
    let variant_ids: Vec<proc_macro2::TokenStream> = variants
        .iter()
        .map(|variant| {
            if let Fields::Unit = variant.fields {
                let id = &variant.ident;
                quote! {
                    #enum_ty::#id
                }
            } else {
                panic!("Variants must be fieldless")
            }
        })
        .collect();

    // Check for deprecated db_rename attributes
    for variant in variants.iter() {
        for attr in &variant.attrs {
            if attr.path().is_ident("db_rename") {
                let variant_name = &variant.ident;
                return syn::Error::new(
                    attr.span(),
                    format!("Invalid attribute format on variant '{}': #[db_rename]. Use the namespaced attribute instead: #[db_enum(rename = \"...\")]", variant_name)
                )
                .to_compile_error()
                .into();
            }
        }
    }

    let variants_db: Vec<String> = variants
        .iter()
        .map(|variant| {
            // Use get_variant_db_enum_attr_value for variant attributes with validation
            let rename_result = get_variant_db_enum_attr_value(&variant.attrs, "rename");
            match rename_result {
                Ok(Some(rename)) => rename,
                Ok(None) => stylize_value(&variant.ident.to_string(), case_style),
                Err(e) => {
                    return format!("Error: {}", e); // This will cause a runtime error if it happens, but it's cleaner than panicking
                }
            }
        })
        .collect();
    let variants_db_bytes: Vec<LitByteStr> = variants_db
        .iter()
        .map(|variant_str| LitByteStr::new(variant_str.as_bytes(), Span::call_site()))
        .collect();

    let common = generate_common(enum_ty, &variant_ids, &variants_db, &variants_db_bytes);
    let (diesel_mapping_def, diesel_mapping_use) =
        // Skip this part if we already have an existing mapping
        if existing_mapping_path.is_some() {
            (None, None)
        } else {
            let new_diesel_mapping_def = generate_new_diesel_mapping(new_diesel_mapping, pg_internal_type);
            let common_impls_on_new_diesel_mapping =
                generate_common_impls(&quote! { #new_diesel_mapping }, enum_ty);
            (
                Some(quote! {
                    #new_diesel_mapping_def
                    #common_impls_on_new_diesel_mapping
                }),
                Some(quote! {
                    pub use self::#modname::#new_diesel_mapping;
                }),
            )
        };

    let pg_impl = if cfg!(feature = "postgres") {
        match existing_mapping_path {
            Some(path) => {
                let common_impls_on_existing_diesel_mapping = generate_common_impls(path, enum_ty);
                let postgres_impl = generate_postgres_impl(path, enum_ty, with_clone);
                Some(quote! {
                    #common_impls_on_existing_diesel_mapping
                    #postgres_impl
                })
            }
            None => Some(generate_postgres_impl(
                &quote! { #new_diesel_mapping },
                enum_ty,
                with_clone,
            )),
        }
    } else {
        None
    };

    let mysql_impl = if cfg!(feature = "mysql") {
        Some(generate_mysql_impl(new_diesel_mapping, enum_ty))
    } else {
        None
    };

    let sqlite_impl = if cfg!(feature = "sqlite") {
        Some(generate_sqlite_impl(new_diesel_mapping, enum_ty))
    } else {
        None
    };

    let imports = quote! {
        use super::*;
        use diesel::{
            backend::{self, Backend},
            deserialize::{self, FromSql},
            expression::AsExpression,
            internal::derives::as_expression::Bound,
            query_builder::{bind_collector::RawBytesBindCollector},
            row::Row,
            serialize::{self, IsNull, Output, ToSql},
            sql_types::*,
            Queryable,
        };
        use std::io::Write;
    };

    let quoted = quote! {
        #diesel_mapping_use
        #[allow(non_snake_case)]
        mod #modname {
            #imports

            #common
            #diesel_mapping_def
            #pg_impl
            #mysql_impl
            #sqlite_impl
        }
    };

    quoted.into()
}

fn stylize_value(value: &str, style: CaseStyle) -> String {
    match style {
        CaseStyle::Camel => value.to_lower_camel_case(),
        CaseStyle::Kebab => value.to_kebab_case(),
        CaseStyle::Pascal => value.to_upper_camel_case(),
        CaseStyle::Upper => value.to_uppercase(),
        CaseStyle::ScreamingSnake => value.to_shouty_snake_case(),
        CaseStyle::Snake => value.to_snake_case(),
        CaseStyle::Verbatim => value.to_string(),
    }
}

fn generate_common(
    enum_ty: &Ident,
    variants_rs: &[proc_macro2::TokenStream],
    variants_db: &[String],
    variants_db_bytes: &[LitByteStr],
) -> proc_macro2::TokenStream {
    quote! {
        fn db_str_representation(e: &#enum_ty) -> &'static str {
            match *e {
                #(#variants_rs => #variants_db,)*
            }
        }

        fn from_db_binary_representation(bytes: &[u8]) -> deserialize::Result<#enum_ty> {
            match bytes {
                #(#variants_db_bytes => Ok(#variants_rs),)*
                v => Err(format!("Unrecognized enum variant: '{}'",
                    String::from_utf8_lossy(v)).into()),
            }
        }
    }
}

fn generate_new_diesel_mapping(
    new_diesel_mapping: &Ident,
    pg_internal_type: &str,
) -> proc_macro2::TokenStream {
    // Note - we only generate a new mapping for mysql and sqlite, postgres
    // should already have one
    quote! {
        #[derive(Clone, SqlType, diesel::query_builder::QueryId)]
        #[diesel(mysql_type(name = "Enum"))]
        #[diesel(sqlite_type(name = "Text"))]
        #[diesel(postgres_type(name = #pg_internal_type))]
        pub struct #new_diesel_mapping;
    }
}

fn generate_common_impls(
    diesel_mapping: &proc_macro2::TokenStream,
    enum_ty: &Ident,
) -> proc_macro2::TokenStream {
    quote! {
        impl AsExpression<#diesel_mapping> for #enum_ty {
            type Expression = Bound<#diesel_mapping, Self>;

            fn as_expression(self) -> Self::Expression {
                Bound::new(self)
            }
        }

        impl AsExpression<Nullable<#diesel_mapping>> for #enum_ty {
            type Expression = Bound<Nullable<#diesel_mapping>, Self>;

            fn as_expression(self) -> Self::Expression {
                Bound::new(self)
            }
        }

        impl<'a> AsExpression<#diesel_mapping> for &'a #enum_ty {
            type Expression = Bound<#diesel_mapping, Self>;

            fn as_expression(self) -> Self::Expression {
                Bound::new(self)
            }
        }

        impl<'a> AsExpression<Nullable<#diesel_mapping>> for &'a #enum_ty {
            type Expression = Bound<Nullable<#diesel_mapping>, Self>;

            fn as_expression(self) -> Self::Expression {
                Bound::new(self)
            }
        }

        impl<'a, 'b> AsExpression<#diesel_mapping> for &'a &'b #enum_ty {
            type Expression = Bound<#diesel_mapping, Self>;

            fn as_expression(self) -> Self::Expression {
                Bound::new(self)
            }
        }

        impl<'a, 'b> AsExpression<Nullable<#diesel_mapping>> for &'a &'b #enum_ty {
            type Expression = Bound<Nullable<#diesel_mapping>, Self>;

            fn as_expression(self) -> Self::Expression {
                Bound::new(self)
            }
        }

        impl<DB> ToSql<Nullable<#diesel_mapping>, DB> for #enum_ty
        where
            DB: Backend,
            Self: ToSql<#diesel_mapping, DB>,
        {
            fn to_sql<'b>(&'b self, out: &mut Output<'b, '_, DB>) -> serialize::Result {
                ToSql::<#diesel_mapping, DB>::to_sql(self, out)
            }
        }
    }
}

fn generate_postgres_impl(
    diesel_mapping: &proc_macro2::TokenStream,
    enum_ty: &Ident,
    with_clone: bool,
) -> proc_macro2::TokenStream {
    // If with_clone is true, we add a manual Clone impl for the diesel mapping type
    // This is usually not necessary as the diesel.toml custom_type_derives now includes Clone by default
    let clone_impl = if with_clone {
        Some(quote! {
            impl Clone for #diesel_mapping {
                fn clone(&self) -> Self {
                    #diesel_mapping
                }
            }
        })
    } else {
        None
    };

    quote! {
        mod pg_impl {
            use super::*;
            use diesel::pg::{Pg, PgValue};

            #clone_impl

            impl FromSql<#diesel_mapping, Pg> for #enum_ty {
                fn from_sql(raw: PgValue) -> deserialize::Result<Self> {
                    from_db_binary_representation(raw.as_bytes())
                }
            }

            impl ToSql<#diesel_mapping, Pg> for #enum_ty
            {
                fn to_sql<'b>(&'b self, out: &mut Output<'b, '_, Pg>) -> serialize::Result {
                    out.write_all(db_str_representation(self).as_bytes())?;
                    Ok(IsNull::No)
                }
            }

            impl Queryable<#diesel_mapping, Pg> for #enum_ty {
                type Row = Self;

                fn build(row: Self::Row) -> deserialize::Result<Self> {
                    Ok(row)
                }
            }
        }
    }
}

fn generate_mysql_impl(diesel_mapping: &Ident, enum_ty: &Ident) -> proc_macro2::TokenStream {
    quote! {
        mod mysql_impl {
            use super::*;
            use diesel;
            use diesel::mysql::{Mysql, MysqlValue};

            impl FromSql<#diesel_mapping, Mysql> for #enum_ty {
                fn from_sql(raw: MysqlValue) -> deserialize::Result<Self> {
                    from_db_binary_representation(raw.as_bytes())
                }
            }

            impl ToSql<#diesel_mapping, Mysql> for #enum_ty
            {
                fn to_sql<'b>(&'b self, out: &mut Output<'b, '_, Mysql>) -> serialize::Result {
                    out.write_all(db_str_representation(self).as_bytes())?;
                    Ok(IsNull::No)
                }
            }

            impl Queryable<#diesel_mapping, Mysql> for #enum_ty {
                type Row = Self;

                fn build(row: Self::Row) -> deserialize::Result<Self> {
                    Ok(row)
                }
            }
        }
    }
}

fn generate_sqlite_impl(diesel_mapping: &Ident, enum_ty: &Ident) -> proc_macro2::TokenStream {
    quote! {
        mod sqlite_impl {
            use super::*;
            use diesel;
            use diesel::sql_types;
            use diesel::sqlite::Sqlite;

            impl FromSql<#diesel_mapping, Sqlite> for #enum_ty {
                fn from_sql(value: backend::RawValue<Sqlite>) -> deserialize::Result<Self> {
                    let bytes = <Vec<u8> as FromSql<sql_types::Binary, Sqlite>>::from_sql(value)?;
                    from_db_binary_representation(bytes.as_slice())
                }
            }

            impl ToSql<#diesel_mapping, Sqlite> for #enum_ty {
                fn to_sql<'b>(&'b self, out: &mut Output<'b, '_, Sqlite>) -> serialize::Result {
                    <str as ToSql<sql_types::Text, Sqlite>>::to_sql(db_str_representation(self), out)
                }
            }

            impl Queryable<#diesel_mapping, Sqlite> for #enum_ty {
                type Row = Self;

                fn build(row: Self::Row) -> deserialize::Result<Self> {
                    Ok(row)
                }
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use syn::parse_quote;

    #[test]
    fn test_db_enum_macro_validation() {
        // Test valid attribute
        let valid_attr: Attribute = parse_quote! {
            #[db_enum(diesel_type = "MyType")]
        };

        let invalid_attr: Attribute = parse_quote! {
            #[db_enum(deisel_type = "MyType")]
        };

        // Test valid attribute
        let valid_result = gather_db_enum_attrs(&[valid_attr], false);
        assert!(valid_result.is_ok(), "Valid attribute should be accepted");
        if let Ok(attrs) = valid_result {
            assert_eq!(attrs.diesel_type, Some("MyType".to_string()));
        }

        // Test invalid attribute
        let invalid_result = gather_db_enum_attrs(&[invalid_attr], false);
        assert!(
            invalid_result.is_err(),
            "Invalid attribute should be rejected"
        );
        if let Err(e) = invalid_result {
            let error_msg = e.to_string();
            assert!(
                error_msg.contains("deisel_type"),
                "Error message should mention the invalid attribute"
            );
        }
    }

    #[test]
    fn test_variant_attribute() {
        // Test the variant rename attribute
        let variant_attr: Attribute = parse_quote! {
            #[db_enum(rename = "custom_name")]
        };

        let result = get_variant_db_enum_attr_value(&[variant_attr.clone()], "rename");
        assert!(result.is_ok());
        assert_eq!(result.unwrap(), Some("custom_name".to_string()));

        // Test with invalid attribute lookup
        let result = get_variant_db_enum_attr_value(&[variant_attr], "nonexistent_attr");
        assert!(result.is_err());
    }
}
